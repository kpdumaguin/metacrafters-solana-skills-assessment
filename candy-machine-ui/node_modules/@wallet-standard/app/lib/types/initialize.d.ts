import type { Wallet } from '@wallet-standard/base';
/**
 * TODO: docs
 */
export declare function initialize(): InitializedWallets;
/** TODO: docs */
export interface InitializedWallets {
    /**
     * TODO: docs
     */
    register(...wallets: ReadonlyArray<Wallet>): () => void;
    /**
     * TODO: docs
     */
    get(): ReadonlyArray<Wallet>;
    /**
     * TODO: docs
     */
    on<E extends InitializedWalletsEventNames = InitializedWalletsEventNames>(event: E, listener: InitializedWalletsEvents[E]): () => void;
}
/** Events emitted by the global `wallets` object. */
export interface InitializedWalletsEvents {
    /**
     * Emitted when wallets are registered.
     *
     * @param wallets Wallets that were registered.
     */
    register(...wallets: ReadonlyArray<Wallet>): void;
    /**
     * Emitted when wallets are unregistered.
     *
     * @param wallets Wallets that were unregistered.
     */
    unregister(...wallets: ReadonlyArray<Wallet>): void;
}
/** TODO: docs */
export declare type InitializedWalletsEventNames = keyof InitializedWalletsEvents;
//# sourceMappingURL=initialize.d.ts.map