"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useStandardWalletAdapters = void 0;
const wallet_standard_wallet_adapter_base_1 = require("@solana/wallet-standard-wallet-adapter-base");
const app_1 = require("@wallet-standard/app");
const react_1 = require("react");
function useStandardWalletAdapters(initialAdapters) {
    // Start with the adapters provided by the app.
    const [adapters, setAdapters] = (0, react_1.useState)(initialAdapters);
    (0, react_1.useEffect)(() => {
        function wrapWalletsWithAdapters(wallets) {
            const standardAdapters = wallets
                .filter(wallet_standard_wallet_adapter_base_1.isWalletAdapterCompatibleWallet)
                .map((wallet) => new wallet_standard_wallet_adapter_base_1.StandardWalletAdapter({ wallet }));
            if (standardAdapters.length) {
                setAdapters((adapters) => [
                    ...standardAdapters,
                    // Filter out adapters with the same name as registered standard wallets.
                    ...adapters.filter((adapter) => {
                        if (standardAdapters.some((standardAdapter) => standardAdapter.name === adapter.name)) {
                            if (!(adapter instanceof wallet_standard_wallet_adapter_base_1.StandardWalletAdapter)) {
                                console.warn(`${adapter.name} was registered as a Standard Wallet. The Wallet Adapter for ${adapter.name} can be removed from your app.`);
                            }
                            return false;
                        }
                        return true;
                    }),
                ]);
            }
        }
        // Initialize the `window.navigator.wallets` interface.
        const { get, on } = (0, app_1.initialize)();
        // Get wallets that have been registered already and wrap them with adapters.
        wrapWalletsWithAdapters(get());
        const destructors = [
            // Add an event listener to add adapters for wallets that are registered after this point.
            on('register', (...wallets) => wrapWalletsWithAdapters(wallets)),
            // Add an event listener to remove adapters for wallets that are unregistered after this point.
            on('unregister', (...wallets) => {
                wallets = wallets.filter(wallet_standard_wallet_adapter_base_1.isWalletAdapterCompatibleWallet);
                if (wallets.length) {
                    setAdapters((adapters) => 
                    // Filter out adapters with the same name as unregistered wallets.
                    adapters.filter((adapter) => wallets.some((wallet) => wallet.name === adapter.name)));
                }
            }),
        ];
        return () => destructors.forEach((destroy) => destroy());
    }, []);
    return adapters;
}
exports.useStandardWalletAdapters = useStandardWalletAdapters;
//# sourceMappingURL=useStandardWalletAdapters.js.map